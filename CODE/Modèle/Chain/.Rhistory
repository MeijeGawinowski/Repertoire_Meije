eList <- rbind(eList,c( rownames(mstdist)[i], colnames(mstdist)[j]))
}
}
}
}
edges <- data.frame(plotcord[eList[,1],1:2], plotcord[eList[,2],1:2])
colnames(edges) <-  c("X1","Y1","X2","Y2")
myTheme <- theme(axis.ticks.y = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(),	panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), panel.border = element_blank(),
panel.background = element_blank(), legend.position = "none")
pmst3 <- ggplot()+theme_void()
pmst3 <- pmst3 + geom_segment(data=edges,aes(x=X1,xend=X2,y=Y1,yend=Y2),lineend="round",size=0.45)
pmst3 <- pmst3 + scale_y_continuous("",labels=NULL)+scale_x_continuous("",labels=NULL)
pmst3 <- pmst3 + geom_point(aes(X1, X2, size=count, colour="red"), data=plotcord,colour="turquoise4")
pmst3 <- pmst3 + ggtitle(paste("ID",ID,", t=",time,", Without coefficients"))
pmst3
file4="data-simul-chain2/D1001DT8.88T.fasta"
PMST=NULL
ID=str_split(file4,"D")[[1]][2]
time=str_split(file4,"T")[[1]][2]
## example for one fasta file
subdna<-read.dna(file1,format="fasta")
uniqseq <- dna2uniqSequences(subdna)
## get the counts for each sequence
IDcounts<-do.call(rbind, lapply(uniqseq@uniqID, function(x) length(x)))
IDcounts<-as.data.frame(IDcounts[order(-IDcounts[,1]),])
colnames(IDcounts) <- c( 'count')
seqindex<-match(rownames(IDcounts), labels(uniqseq@uniqdna))
## reorder the DNAbin accordingly
ordereddna<-uniqseq@uniqdna[seqindex, ]
uniqdist<-dist.dna(ordereddna,model="raw", as.matrix=TRUE)
mstdist<-mst(uniqdist)
plotcord <- data.frame(gplot.layout.fruchtermanreingold(mstdist, NULL))
X1=X2=Y1=Y2=NULL
colnames(plotcord) = c("X1","X2")
rownames(plotcord) = rownames(uniqdist)
plotcord<-cbind(plotcord,IDcounts)
mstdist[lower.tri(mstdist,diag=TRUE)]<-NA
eList <- NULL
for ( i in 1:nrow(mstdist) ){
for ( j in 1:ncol(mstdist)) {
if (!is.na(mstdist[i,j])){
if (mstdist[i,j]>0){
eList <- rbind(eList,c( rownames(mstdist)[i], colnames(mstdist)[j]))
}
}
}
}
edges <- data.frame(plotcord[eList[,1],1:2], plotcord[eList[,2],1:2])
colnames(edges) <-  c("X1","Y1","X2","Y2")
myTheme <- theme(axis.ticks.y = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(),	panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), panel.border = element_blank(),
panel.background = element_blank(), legend.position = "none")
pmst4 <- ggplot()+theme_void()
pmst4 <- pmst4 + geom_segment(data=edges,aes(x=X1,xend=X2,y=Y1,yend=Y2),lineend="round",size=0.45)
pmst4 <- pmst4 + scale_y_continuous("",labels=NULL)+scale_x_continuous("",labels=NULL)
pmst4 <- pmst4 + geom_point(aes(X1, X2, size=count, colour="red"), data=plotcord,colour="turquoise4")
pmst4 <- pmst4 + ggtitle(paste("ID",ID,", t=",time,", Without coefficients"))
pmst4
PMST2=c(list(pmst1),list(pmst2),list(pmst3),list(pmst4))
do.call(grid.arrange,PMST2)
file1="data-simul-chain3/D1001DT0.06T.fasta"
PMST=NULL
ID=str_split(file1,"D")[[1]][2]
time=str_split(file1,"T")[[1]][2]
## example for one fasta file
subdna<-read.dna(file1,format="fasta")
uniqseq <- dna2uniqSequences(subdna)
## get the counts for each sequence
IDcounts<-do.call(rbind, lapply(uniqseq@uniqID, function(x) length(x)))
IDcounts<-as.data.frame(IDcounts[order(-IDcounts[,1]),])
colnames(IDcounts) <- c( 'count')
seqindex<-match(rownames(IDcounts), labels(uniqseq@uniqdna))
## reorder the DNAbin accordingly
ordereddna<-uniqseq@uniqdna[seqindex, ]
uniqdist<-dist.dna(ordereddna,model="raw", as.matrix=TRUE)
mstdist<-mst(uniqdist)
plotcord <- data.frame(gplot.layout.fruchtermanreingold(mstdist, NULL))
X1=X2=Y1=Y2=NULL
colnames(plotcord) = c("X1","X2")
rownames(plotcord) = rownames(uniqdist)
plotcord<-cbind(plotcord,IDcounts)
mstdist[lower.tri(mstdist,diag=TRUE)]<-NA
eList <- NULL
for ( i in 1:nrow(mstdist) ){
for ( j in 1:ncol(mstdist)) {
if (!is.na(mstdist[i,j])){
if (mstdist[i,j]>0){
eList <- rbind(eList,c( rownames(mstdist)[i], colnames(mstdist)[j]))
}
}
}
}
edges <- data.frame(plotcord[eList[,1],1:2], plotcord[eList[,2],1:2])
colnames(edges) <-  c("X1","Y1","X2","Y2")
myTheme <- theme(axis.ticks.y = element_blank(), axis.ticks.x = element_blank(),
axis.title.y = element_blank(),	panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(), panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(), panel.border = element_blank(),
panel.background = element_blank(), legend.position = "none")
pmst1 <- ggplot()+theme_void()
pmst1 <- pmst1 + geom_segment(data=edges,aes(x=X1,xend=X2,y=Y1,yend=Y2),lineend="round",size=0.5)
pmst1 <- pmst1 + scale_y_continuous("",labels=NULL)+scale_x_continuous("",labels=NULL)
pmst1 <- pmst1 + geom_point(aes(X1, X2, size=count, colour="red"), data=plotcord,colour="turquoise4")
pmst1 <- pmst1 + ggtitle(paste("ID",ID,", t=",time,", With coefficients"))
pmst1
PMST2=c(list(pmst1),list(pmst2),list(pmst3),list(pmst4))
do.call(grid.arrange,PMST2)
rm(list=ls())
library(ape)
library(vegan)
library(pegas)
library(poppr)
library(DiversitySampler)
library(untb)
countProp=function(v){
c=0
for (i in 1:length(v)){
if (v[i] != 0){c=c+1}
}
return(c)
}
toDNAbin=function(samp,sequence){
# samp : indexes of the sampled sequences
# sequence : matrix with all the sequences
M=dim(sequence)[2]
v=matrix(0,nrow=length(samp),ncol=M)
for (i in 1:length(samp)){
v[i,]=sequence[samp[i],]
}
v=c(v)
v=as.character(v)
for (i in 1:length(v)){
if(v[i]=="1"){v[i]="A"}
if(v[i]=="2"){v[i]="C"}
if(v[i]=="3"){v[i]="G"}
if(v[i]=="4"){v[i]="T"}
}
v=as.DNAbin(matrix(c(v),ncol=M,nrow=length(samp)))
return(v)
}
viralKinetics=function(init,s,d,beta,delta,p,c,timelag,duration){
## MODEL COMPONENTS
## DOI: 10.1002/wsbm.129
## http://onlinelibrary.wiley.com/doi/10.1002/wsbm.129/full
## T: quantity of target cells
## I: quantity of infected cells2
## V: quantity of infectious viral particles
## s: supply rate of target cells
## d: death rate of target cells
## beta: infection rate
## delta: death rate of infected cells
## p: production rate of virus
## c: clearance rate of virus
## OTHER NOTATIONS
## init: initial state for T, I and V
## timelag: numerical time lag for solving the equation system
## duration: duration of infection
target=init$TT
infected=init$I
virus=init$V
time=seq(0,duration,by=timelag)
for(i in 1:(length(time)-1)){
## implicit method for ode resolution
target=c(target,target[i]/(1-timelag*(s-d)+timelag*beta*virus[i]))
infected=c(infected,(timelag*beta*target[i]*virus[i]+infected[i])/
(1+timelag*delta))
virus=c(virus,(timelag*p*infected[i]+virus[i])/(1+timelag*c))
}
## output: time, nb of target cells, nb of infected cells, nb of virions
return(data.frame(time,target,infected,virus))
}
# function that assesses diversity at each moment
intraHostDiversity=function(init=list(prop=1,sequ1=rep(1,10^4)),kinetics,mu,gamma,fitnessRule,method=1,size=2){
## mu: mutation rate per nucleotide, per virus particle (i.e. virion), per unit of time
## gamma : evolution rates (effects of the environment)
## tolerance: discard variants with proportions less than tolerance
## fitnessRule: function determining how fit is a variant
if(nrow(kinetics)==1){browser()}
M=length(init[[2]])
lags=diff(kinetics$time)
nmutation=0
## initialize the composition of variants
compo=init
## number of information elements provided in compo before the sequences (here, only 1 : prop)
ninfo=1
## compute fitness for initial variants
fitness=NULL
for(k in (ninfo+1):length(compo)){
fitness=c(fitness,fitnessRule(compo[[k]]))
}
nb_vector=c()
Richness=c()
Time=c()
Shannon=c()
indice=c()
for(i in 2:length(kinetics$time)){
if (kinetics$virus[i] >= 1){
print(i)
Time=c(Time,i)
## draw the number of mutations for time step i
nmut=rpois(1,mu*M*kinetics$virus[i-1]*lags[i-1])
nmutation=c(nmutation,nmut)
if(nmut>0){
propCand=rep(1,nmut)
## draw which variants are used for generating new variants
mutatingSequ=sample(x=1:(length(compo)-ninfo),size=length(propCand),
replace=TRUE,prob=compo$prop)
## update the vector of proportions
compo$prop=c(compo$prop*(1-nmut/kinetics$virus[i-1]),
propCand*nmut/kinetics$virus[i-1])
## draw the mutations
for(k in 1:length(propCand)){
newsequ=compo[[ninfo+mutatingSequ[k]]]
mutatingNucl=sample(1:M,1)
newsequ[mutatingNucl]=
sample((1:4)[(1:4)!=newsequ[mutatingNucl]],1)
compo=c(compo,list(newsequ))
## compute fitness of new variants
fitness=c(fitness,fitnessRule(newsequ))
}
}
## multiplication probability depends on fitness
pmult=compo$prop*fitness
pmult=pmult/sum(pmult)
pmult=rnorm(length(pmult),mean=pmult,sd=sqrt(gamma[1]*pmult*(1-pmult)^gamma[2]))
pmult=pmin(1,pmax(0,pmult))
## check that pmult is a probability
compo$prop=as.numeric(rmultinom(n=1,size=kinetics$virus[i],
prob=pmult))
compo$prop=compo$prop/sum(compo$prop)
## compute new proportions of variants
proportion=compo$prop
N=length(proportion)
sequence=matrix(0,N,M)
for(k in 1:N){
sequence[k,]=compo[[ninfo+k]]
}
## Richness estimator
if (method==1){
indice=c(indice,countProp(compo$prop))
}
## Shannon Diversity Index
if (method==2){
nb=compo$prop*kinetics$virus[i]
H1=diversity(nb,index="shannon",base=exp(1))
indice=c(indice,H1)
}
## Simpson Index
if (method==3){
nb=compo$prop*kinetics$virus[i]
H2=diversity(nb,index="simpson")
indice=c(indice,H2)
}
## Pielou's Evenness
if(method==4){
Richness=c(Richness,countProp(compo$prop))
nb=compo$prop*kinetics$virus[i]
Shannon=c(Shannon,diversity(nb,index="shannon",base=exp(1)))
indice=Shannon/log10(Richness)
}
## Nucleotide Diversity or p-distance
if(method==5){
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,nuc.div(seq))
}
## Jukes and Cantor Distance
if(method==6){
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,mean(dist.dna(seq,model="JC69")))
}
## Nei Distance
if(method==7){
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,mean(nei.dist(as.genind(seq))))
}
}
}
return(list(t=Time,indice=indice))
}
vpar1=list(init=list(TT=1e12,I=0,V=1e03),s=0,d=0,beta=5.0e-05,delta=2.0,p=1e-06,c=0.5,timelag=0.1,duration=45)
kin1 = viralKinetics(init=vpar1$init,vpar1$s,vpar1$d,vpar1$beta,vpar1$delta,vpar1$p,vpar1$c,vpar1$timelag,vpar1$duration)
spar1=list(init=list(prop=1,sequ1=rep(1,1000)),mu=5e-06,gamma=c(0.001,1000),tolerance=1e-05)
spar2=list(init=list(prop=1,sequ1=rep(1,1000)),mu=5e-06,gamma=c(0,1000),tolerance=1e-05)
fpar2=function(sequ){
M=length(sequ)
return(1*(1+9*mean(sequ[1:round(0.1*M)]==2))/
(1+9*mean(sequ[1:round(0.1*M)]==3)))
}
fpar1=function(sequ){ return(1) }
richness1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=1)
richness2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=1)
plot(richness3$t,richness3$indice,type="l",col="mediumorchid",xlab="t",ylab="S",main="Richness Estimator")
richness3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=1)
par(mfrow=c(1,1))
plot(richness1$t,richness1$indice,type="l",col="mediumorchid",xlab="t",ylab="S",main="Richness Estimator")
plot(richness2$t,richness2$indice,type="l",col="mediumorchid",xlab="t",ylab="S",main="Richness Estimator")
plot(richness3$t,richness3$indice,type="l",col="mediumorchid",xlab="t",ylab="S",main="Richness Estimator")
plot(richness2$t,richness2$indice,type="l",col="mediumorchid",xlab="t",ylab="S",main="Richness Estimator")
plot(richness2$t,richness2$indice,type="l",col="mediumorchid",xlab="t",ylab="S",main="Richness Estimator")
lines(richness1$t,richness1$indice,type="l",col=3)
lines(richness3$t,richness3$indice,type="l",col=2)
shannon1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=2)
shannon2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=2)
shannon3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=2)
plot(shannon1$t,shannon1$indice,col="dodgerblue4",type="l",xlab="t",ylab="H",main="Shannon Index")
plot(shannon2$t,shannon2$indice,col="dodgerblue4",type="l",xlab="t",ylab="H",main="Shannon Index")
plot(shannon3$t,shannon3$indice,col="dodgerblue4",type="l",xlab="t",ylab="H",main="Shannon Index")
plot(shannon2$t,shannon2$indice,col="dodgerblue4",type="l",xlab="t",ylab="H",main="Shannon Index")
lines(shannon1$t,shannon1$indice,col=3)
lines(shannon3$t,shannon3$indice,col=2)
simpson1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=3)
plot(simpson2$t,simpson2$indice,col="forestgreen",type="l",xlab="t",ylab="",main="Simpson Index")
simpson2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=3)
shannon3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=2)
simpson3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=3)
par(mfrow=c(1,1))
plot(simpson1$t,simpson1$indice,col="forestgreen",type="l",xlab="t",ylab="",main="Simpson Index")
plot(simpson2$t,simpson2$indice,col="forestgreen",type="l",xlab="t",ylab="",main="Simpson Index")
plot(simpson3$t,simpson3$indice,col="forestgreen",type="l",xlab="t",ylab="",main="Simpson Index")
plot(simpson1$t,simpson1$indice,col="forestgreen",type="l",xlab="t",ylab="",main="Simpson Index")
plot(simpson2$t,simpson2$indice,col=3)
plot(simpson1$t,simpson1$indice,col="forestgreen",type="l",xlab="t",ylab="",main="Simpson Index")
lines(simpson2$t,simpson2$indice,col=3)
plot(simpson1$t,simpson1$indice,col="forestgreen",type="l",xlab="t",ylab="",main="Simpson Index")
lines(simpson2$t,simpson2$indice,col=4)
lines(simpson3$t,simpson3$indice,col=2)
pielou1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=4)
pielou2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=4)
pielou3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=4)
plot(pielou1$t,pielou1$indice,col="firebrick2",type="l", xlab="t",ylab="J1",main="Pielou Evenness")
plot(pielou2$t,pielou2$indice,col="firebrick2",type="l", xlab="t",ylab="J1",main="Pielou Evenness")
plot(pielou3$t,pielou3$indice,col="firebrick2",type="l", xlab="t",ylab="J1",main="Pielou Evenness")
plot(pielou1$t,pielou1$indice,col="firebrick2",type="l", xlab="t",ylab="J1",main="Pielou Evenness")
lines(pielou2$t,pielou2$indice,col=4)
lines(pielou3$t,pielou3$indice,col=3)
nucdiv1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=5,size=100)
nucdiv2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=5,size=100)
nucdiv3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=5,size=100)
plot(nucdiv1$t,nucdiv1$indice,col="mediumorchid",type="l",ylab="",xlab="t",main="Nucleotide diversity")
plot(nucdiv2$t,nucdiv3$indice,col="mediumorchid",type="l",ylab="",xlab="t",main="Nucleotide diversity")
plot(nucdiv3$t,nucdiv3$indice,col="mediumorchid",type="l",ylab="",xlab="t",main="Nucleotide diversity")
plot(nucdiv2$t,nucdiv3$indice,col="mediumorchid",type="l",ylab="",xlab="t",main="Nucleotide diversity")
plot(nucdiv3$t,nucdiv3$indice,col="mediumorchid",type="l",ylab="",xlab="t",main="Nucleotide diversity")
plot(nucdiv2$t,nucdiv2$indice,col="mediumorchid",type="l",ylab="",xlab="t",main="Nucleotide diversity")
plot(nucdiv1$t,nucdiv1$indice,col="mediumorchid",type="l",ylab="",xlab="t",main="Nucleotide diversity")
lines(nucdiv2$t,nucdiv2$indice,col=3)
lines(nucdiv3$t,nucdiv3$indice,col=2)
JCdistance1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=6,size=100)
JCdistance2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=6,size=100)
JCdistance3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=6,size=100)
neidistance1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=7,size=100)
neidistance2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=7,size=100)
neidistance3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=7,size=100)
plot(JCdistance1$t,JCdistance1$indice,type="l",col="firebrick2",xlab="t",ylab="JC distance",main="Jukes and Cantor distance")
plot(JCdistance2$t,JCdistance2$indice,type="l",col="firebrick2",xlab="t",ylab="JC distance",main="Jukes and Cantor distance")
plot(JCdistance3$t,JCdistance3$indice,type="l",col="firebrick2",xlab="t",ylab="JC distance",main="Jukes and Cantor distance")
plot(JCdistance3$t,JCdistance3$indice,type="l",col="firebrick2",xlab="t",ylab="JC distance",main="Jukes and Cantor distance")
lines(JCdistance1$t,JCdistance1$indice,type="l",col=4)
lines(JCdistance2$t,JCdistance2$indice,type="l",col=3)
plot(JCdistance3$t,JCdistance3$indice,type="l",col="firebrick2",xlab="t",ylab="JC distance",main="Jukes and Cantor distance")
lines(JCdistance1$t,JCdistance1$indice,type="l",col=4)
lines(JCdistance2$t,JCdistance2$indice,type="l",col=3)
plot(neidistance1$t,neidistance1$indice,col="forestgreen",type="l",main="Nei distance",xlab="t",ylab="Nei distance")
plot(neidistance2$t,neidistance2$indice,col="forestgreen",type="l",main="Nei distance",xlab="t",ylab="Nei distance")
plot(neidistance2$t,neidistance2$indice,col="forestgreen",type="l",main="Nei distance",xlab="t",ylab="Nei distance")
plot(neidistance1$t,neidistance1$indice,col="forestgreen",type="l",main="Nei distance",xlab="t",ylab="Nei distance")
plot(neidistance2$t,neidistance2$indice,col="forestgreen",type="l",main="Nei distance",xlab="t",ylab="Nei distance")
plot(neidistance3$t,neidistance3$indice,col="forestgreen",type="l",main="Nei distance",xlab="t",ylab="Nei distance")
plot(neidistance1$t,neidistance1$indice,col="forestgreen",type="l",main="Nei distance",xlab="t",ylab="Nei distance")
lines(neidistance2$t,neidistance2$indice,col=4)
lines(neidistance3$t,neidistance3$indice,col=2)
data=data.frame(neidistance1$t,neidistance1$indice)
pl=ggplot(data=newdata, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + stat_smooth(method="lm",colour="firebrick3",fill="red")
pl=pl+geom_point(size=2,shape=1) + stat_smooth(method="loess",colour="firebrick3",fill="red")
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + stat_smooth(method="loess",colour="firebrick3",fill="red")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
print(pl)
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + stat_smooth(method="gam",colour="firebrick3",fill="red")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
print(pl)
pl=pl+geom_point(size=2,shape=1) + stat_smooth(method="gam",colour="firebrick3",fill="red")
print(pl)
pl=pl+geom_point(size=2,shape=1) + stat_smooth(method="glm",colour="firebrick3",fill="red")
print(pl)
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + stat_smooth(method="glm",colour="firebrick3",fill="red")
print(pl)
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + stat_smooth(method="rlm",colour="firebrick3",fill="red")
print(pl)
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + geom_smooth(method="rlm",colour="firebrick3",fill="red")
print(pl)
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + geom_smooth(method="rml",colour="firebrick3",fill="red")
print(pl)
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + geom_smooth(method=rml,colour="firebrick3",fill="red")
pl=ggplot(data=data, aes(x=neidistance1$t,y=neidistance1$indice))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + geom_smooth(method=rlm,colour="firebrick3",fill="red")
div.spl=smooth.spline(neidistance1$t,neidistance1$indice)
plot(neidistance1$t,neidistance1$indice)
lines(div.spl,col="blue")
data(airquality)
summary(airquality)
airquality
airquality=airquality[complete.cases(airquality),]
airquality=airquality[airquality$Ozone<110,]
dim(airquality)
cor(airquality)
ind_app=sample(1:105,80)
airquality_app=airquality[ind_app,]
airquality_test=airquality[-ind_app,]
plot(airquality_app$Temp,airquality_app$Ozone)
#################
#### Splines ####
#################
Ozone=airquality_app$Ozone
Temp=airquality_app$Temp
plot(Temp,Ozone,main="Smoothing Splines")
Ozone.spl=smooth.spline(Temp,Ozone)
Ozone.spl$df
Ozone.spl$lambda
lines(Ozone.spl,col="blue")
lines(smooth.spline(Temp,Ozone,df=15),lty=2,col="red")
div.spl$yin
div.spl$w
div.spl$data
div.spl$lev
div.spl$call
lines(div.spl)
data_nei=data.frame(neidistance1$t,neidistance1$indice,neidistance2$indice,neidistance3$indice)
colnames(data_nei)=c("time","nei1","nei2","nei3")
write.table("data_nei.csv",data_nei)
write.table(data_nei,"data_nei.csv",sep="\t")
data_JC=data.frame(JCdistance1$t,JCdistance1$indice,JCdistance2$indice,JCdistance3$indice)
colnames(data_JC)=c("time","JC1","JC2","JC3")
write.table(data_JC,"data_JC3.csv",sep="\t")
data_pi=data.frame(nucdiv1$t,nucdiv1$indice,nucdiv2$indice,nucdiv3$indice)
colnames(data_pi)=c("time","pi1","pi2","pi3")
write.table(data_pi,"data_pi.cvs",sep="\t")
data_pielou=data.frame(pielou1$t,pielou1$indice,pielou2$indice,pielou3$indice)
colnames(data_pielou)=c("time","pielou1","pielou2","pielou3")
write.table(data_pielou,"data_pielou.csv",sep="\t")
data_simpson=data.frame(simpson1$t,simpson1$indice,simpson2$indice,simpson3$indice)
colnames(data_simpson)=c("time","simpson1","simpson2","simpson3")
write.table(data_simpson,"data_simpson.cvs",sep="\t")
data_shannon=data.frame(shannon1$t,shannon1$indice,shannon2$indice,shannon3$indice)
colnames(data_shannon)=c("time","shannon1","shannon2","shannon3")
write.table(data_shannon,"data_shannon.csv",sep="\t")
data_richness=data.frame(richness1$t,richness1$indice,richness2$indice,richness3$indice)
colnames(data_richness)=c("time","richness1","richness2","richness3")
write.table(data_richness,"data_richness.csv")
richness=read.csv("data_richness.csv",sep="\t",header=TRUE)
richness
richness=data.frame(read.csv("data_richness.csv",sep="\t",header=TRUE))
richness
richness$time
richness=read.csv("data_richness.csv",sep="\t",header=TRUE)$time.richness1.richness2.richness3
richness
richness$time
richness=read.table("data_richness.csv",sep="\t",header=TRUE)
richness
data.frame(richness)
richness=data.frame(richness)
richness[1,]
richness[,1]
richness=read.table("data_richness.csv",sep="\t",header=TRUE)
head(richness)
richness[2,]
richness[,2]
richness[,1]
length(richness[,1])
richness[2,]
richness[,2]
richness=read.table("data_richness.csv",sep=",",header=TRUE)
head(richness)
richness[2,]
richness[,2]
write.table(data_richness,"data_richness.csv",sep=",")
richness=read.table("data_richness.csv",sep=",",header=TRUE)
richness
rm(list=ls())
richness=read.table("data_richness.csv",sep=",",header=TRUE)
rich.spl1=smooth.spline(richness$time,richness$richness1)
plot(richness$time,richness$richness1)
lines(rich.div1,col="blue")
lines(rich.spl1,col="blue")
plot(rich.spl1,col="blue")
plot(rich.spl1,col="blue",type="l")
pl=ggplot(data=richness, aes(x=time,y=richness1))+theme_classic()
pl=pl+geom_point(size=2,shape=1) + geom_smooth(method="loess",colour="firebrick3",fill="red")
print(pl)
rich.spl1$fit
plot(Temp,Ozone,main="Smoothing Splines")
lines(sort(richness$time),predict(rich.spl1,richness$time)[order(richness$time),2])
lines(sort(richness$time),predict(rich.spl1,richness$time,int="confidence")[order(richness$time),2])
pred1=predict(rich.spl1,richness$time,int="confidence")
lines(sort(richness$time),pred[order(richness$time),2])
lines(sort(richness$time),pred1[order(richness$time),2])
