mutatingSequ=sample(x=1:(length(compo)-ninfo),size=length(propCand),
replace=TRUE,prob=compo$prop)
## update the vector of proportions
compo$prop=c(compo$prop*(1-nmut/kinetics$virus[i-1]),
propCand*nmut/kinetics$virus[i-1])
## draw the mutations
for(k in 1:length(propCand)){
newsequ=compo[[ninfo+mutatingSequ[k]]]
mutatingNucl=sample(1:M,1)
newsequ[mutatingNucl]=
sample((1:4)[(1:4)!=newsequ[mutatingNucl]],1)
compo=c(compo,list(newsequ))
## compute fitness of new variants
fitness=c(fitness,fitnessRule(newsequ))
}
}
## multiplication probability depends on fitness
pmult=compo$prop*fitness
pmult=pmult/sum(pmult)
pmult=rnorm(length(pmult),mean=pmult,sd=sqrt(gamma[1]*pmult*(1-pmult)^gamma[2]))
pmult=pmin(1,pmax(0,pmult))
## check that pmult is a probability
compo$prop=as.numeric(rmultinom(n=1,size=kinetics$virus[i],
prob=pmult))
compo$prop=compo$prop/sum(compo$prop)
## compute new proportions of variants
proportion=compo$prop
N=length(proportion)
sequence=matrix(0,N,M)
for(k in 1:N){
sequence[k,]=compo[[ninfo+k]]
}
## Richness estimator
if (method==1){
ylab = "Richness estimator"
title="data_richness.csv"
indice=c(indice,countProp(compo$prop))
}
## Shannon Diversity Index
if (method==2){
ylab="Shannon Index"
title="data_shannon.csv"
nb=compo$prop*kinetics$virus[i]
H1=diversity(nb,index="shannon",base=exp(1))
indice=c(indice,H1)
}
## Simpson Index
if (method==3){
ylab="Simpson Index"
title="data_simpson.csv"
nb=compo$prop*kinetics$virus[i]
H2=diversity(nb,index="simpson")
indice=c(indice,H2)
}
## Pielou's Evenness
if(method==4){
ylab="Pielou Evenness"
title="data_pielou.csv"
Richness=c(Richness,countProp(compo$prop))
nb=compo$prop*kinetics$virus[i]
Shannon=c(Shannon,diversity(nb,index="shannon",base=exp(1)))
indice=Shannon/log10(Richness)
}
## Nucleotide Diversity or p-distance
if(method==5){
ylab="p-distance"
title="data_nuc.csv"
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,nuc.div(seq))
}
## Jukes and Cantor Distance
if(method==6){
ylab="Jukes and Cantor distance"
title="data_JC.csv"
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,mean(dist.dna(seq,model="JC69")))
}
## Nei Distance
if(method==7){
ylab="Nei distance"
title="data_nei.csv"
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,mean(nei.dist(as.genind(seq))))
}
}
}
data=data.frame(Time,indice)
write.table(data,title,sep="\t")
return(list(data=data,ylab=ylab))
}
scatter_plot=function(data,ylab){
plot(data$Time,data$indice,ylab=ylab)
return(data)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
vpar1=list(init=list(TT=1e12,I=0,V=1e03),s=0,d=0,beta=5.0e-05,delta=2.0,p=1e-06,c=0.5,timelag=0.1,duration=45)
kin1 = viralKinetics(init=vpar1$init,vpar1$s,vpar1$d,vpar1$beta,vpar1$delta,vpar1$p,vpar1$c,vpar1$timelag,vpar1$duration)
spar1=list(init=list(prop=1,sequ1=rep(1,1000)),mu=5e-06,gamma=c(0.001,1000),tolerance=1e-05)
spar2=list(init=list(prop=1,sequ1=rep(1,1000)),mu=5e-06,gamma=c(0,1000),tolerance=1e-05)
fpar2=function(sequ){
M=length(sequ)
return(1*(1+9*mean(sequ[1:round(0.1*M)]==2))/
(1+9*mean(sequ[1:round(0.1*M)]==3)))
}
fpar1=function(sequ){ return(1) }
richness1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=1)
shannon1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=2)
simpson1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=3)
pielou1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=4)
nucdiv1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=5,size=100)
setwd("~/Desktop/Repertory_MeijeGawinowski/Ref_files")
nucdiv1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=5,size=100)
JCdistance1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=6,size=100)
neidistance1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=7,size=100)
setwd("~/Desktop/Repertory_MeijeGawinowski/gamma_files")
richness2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=1)
shannon2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=2)
simpson2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=3)
pielou2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=4)
nucdiv2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=5)
JCdistance2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=6,size=100)
neidistance2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=7,size=100)
setwd("~/Desktop/Repertory_MeijeGawinowski/fitness_files")
richness3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=1)
shannon3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=2)
simpson3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=3)
pielou3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=4)
nucdiv3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=5,size=100)
JCdistance3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=6,size=100)
neidistance3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=7,size=100)
rm(list=ls())
library(reshape2)
library(ggplot2)
scatter_plot=function(data,ylab){
plot(data$Time,data$indice,ylab=ylab)
return(data)
}
smooth_plot=function(file1,file2,comp){
# file1 must be the reference (gamma, no fitnessÄ±)
data1=read.table(file1,sep="\t",header=TRUE)
data2=read.table(file2,sep="\t",header=TRUE)
newdata=data.frame(data1$Time,data1$indice,data2$indice)
colnames(newdata)
if (comp=="Gamma"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
if (comp=="fitness"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
newdata=melt(newdata,id.vars="time")
pl=ggplot(newdata,aes(x=time,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
return(pl)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
setwd("~/Desktop/Repertory_MeijeGawinowski/Ref_files")
richness1=read.table("data_richness.csv",sep="\t",header=TRUE)
shannon1=read.table("data_shannon.csv",sep="\t",header=TRUE)
simpson1=read.table("data_simpson.csv",sep="\t",header=TRUE)
pielou1=read.table("data_pielou.csv",sep="\t",header=TRUE)
nuc1=read.table("data_nuc.csv",sep="\t",header=TRUE)
jc1=read.table("data_JC.csv",sep="\t",header=TRUE)
nei1=read.table("data_nei.csv",sep="\t",header=TRUE)
setwd("~/Desktop/Repertory_MeijeGawinowski/gamma_files")
richness2=read.table("data_richness.csv",sep="\t",header=TRUE)
shannon2=read.table("data_shannon.csv",sep="\t",header=TRUE)
simpson2=read.table("data_simpson.csv",sep="\t",header=TRUE)
pielou2=read.table("data_pielou.csv",sep="\t",header=TRUE)
nuc2=read.table("data_nuc.csv",sep="\t",header=TRUE)
jc2=read.table("data_JC.csv",sep="\t",header=TRUE)
nei2=read.table("data_nei.csv",sep="\t",header=TRUE)
setwd("~/Desktop/Repertory_MeijeGawinowski/fitness_files")
richness3=read.table("data_richness.csv",sep="\t",header=TRUE)
shannon3=read.table("data_shannon.csv",sep="\t",header=TRUE)
simpson3=read.table("data_simpson.csv",sep="\t",header=TRUE)
pielou3=read.table("data_pielou.csv",sep="\t",header=TRUE)
nuc3=read.table("data_nuc.csv",sep="\t",header=TRUE)
jc3=read.table("data_JC.csv",sep="\t",header=TRUE)
nei3=read.table("data_nei.csv",sep="\t",header=TRUE)
vpar1=list(init=list(TT=1e12,I=0,V=1e03),s=0,d=0,beta=5.0e-05,delta=2.0,p=1e-06,c=0.5,timelag=0.01,duration=50)
viralKinetics=function(init,s,d,beta,delta,p,c,timelag,duration){
## MODEL COMPONENTS
## DOI: 10.1002/wsbm.129
## http://onlinelibrary.wiley.com/doi/10.1002/wsbm.129/full
## T: quantity of target cells
## I: quantity of infected cells2
## V: quantity of infectious viral particles
## s: supply rate of target cells
## d: death rate of target cells
## beta: infection rate
## delta: death rate of infected cells
## p: production rate of virus
## c: clearance rate of virus
## OTHER NOTATIONS
## init: initial state for T, I and V
## timelag: numerical time lag for solving the equation system
## duration: duration of infection
target=init$TT
infected=init$I
virus=init$V
time=seq(0,duration,by=timelag)
for(i in 1:(length(time)-1)){
## implicit method for ode resolution
target=c(target,target[i]/(1-timelag*(s-d)+timelag*beta*virus[i]))
infected=c(infected,(timelag*beta*target[i]*virus[i]+infected[i])/
(1+timelag*delta))
virus=c(virus,(timelag*p*infected[i]+virus[i])/(1+timelag*c))
}
## output: time, nb of target cells, nb of infected cells, nb of virions
return(data.frame(time,target,infected,virus))
}
kin1=viralKinetics(vpar1$init,vpar1$init,vpar1$d,vpar1$beta,vpar1$delta,vpar1$p,vpar1$c,vpar1$timelag,vpar1$duration)
kin1=viralKinetics(vpar1$init,vpar1$s,vpar1$d,vpar1$beta,vpar1$delta,vpar1$p,vpar1$c,vpar1$timelag,vpar1$duration)
par(mfrow=c(3,2))
plot(kin1$time,kin1$virus,ylab="Virion population",xlab="time")
scatter_plot(richness1,"Richness Estimator")
scatter_plot(shannon1, "Shannon Index")
scatter_plot(simspson1, "Simpson Index")
setwd("~/Desktop/Repertory_MeijeGawinowski/Ref_files")
simpson1=read.table("data_simpson.csv",sep="\t",header=TRUE)
simpson1
rm(list=ls())
library(reshape2)
library(ggplot2)
scatter_plot=function(data,ylab){
plot(data$Time,data$indice,ylab=ylab)
return(data)
}
smooth_plot=function(file1,file2,comp){
# file1 must be the reference (gamma, no fitnessÄ±)
data1=read.table(file1,sep="\t",header=TRUE)
data2=read.table(file2,sep="\t",header=TRUE)
newdata=data.frame(data1$Time,data1$indice,data2$indice)
colnames(newdata)
if (comp=="Gamma"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
if (comp=="fitness"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
newdata=melt(newdata,id.vars="time")
pl=ggplot(newdata,aes(x=time,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
return(pl)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
## Files loading
setwd("~/Desktop/Repertory_MeijeGawinowski/Ref_files")
richness1=read.table("data_richness.csv",sep="\t",header=TRUE)
shannon1=read.table("data_shannon.csv",sep="\t",header=TRUE)
simpson1=read.table("data_simpson.csv",sep="\t",header=TRUE)
pielou1=read.table("data_pielou.csv",sep="\t",header=TRUE)
nuc1=read.table("data_nuc.csv",sep="\t",header=TRUE)
jc1=read.table("data_JC.csv",sep="\t",header=TRUE)
nei1=read.table("data_nei.csv",sep="\t",header=TRUE)
setwd("~/Desktop/Repertory_MeijeGawinowski/gamma_files")
richness2=read.table("data_richness.csv",sep="\t",header=TRUE)
shannon2=read.table("data_shannon.csv",sep="\t",header=TRUE)
simpson2=read.table("data_simpson.csv",sep="\t",header=TRUE)
pielou2=read.table("data_pielou.csv",sep="\t",header=TRUE)
nuc2=read.table("data_nuc.csv",sep="\t",header=TRUE)
jc2=read.table("data_JC.csv",sep="\t",header=TRUE)
nei2=read.table("data_nei.csv",sep="\t",header=TRUE)
setwd("~/Desktop/Repertory_MeijeGawinowski/fitness_files")
richness3=read.table("data_richness.csv",sep="\t",header=TRUE)
shannon3=read.table("data_shannon.csv",sep="\t",header=TRUE)
simpson3=read.table("data_simpson.csv",sep="\t",header=TRUE)
pielou3=read.table("data_pielou.csv",sep="\t",header=TRUE)
nuc3=read.table("data_nuc.csv",sep="\t",header=TRUE)
jc3=read.table("data_JC.csv",sep="\t",header=TRUE)
nei3=read.table("data_nei.csv",sep="\t",header=TRUE)
## Viral kinetics
vpar1=list(init=list(TT=1e12,I=0,V=1e03),s=0,d=0,beta=5.0e-05,delta=2.0,p=1e-06,c=0.5,timelag=0.01,duration=50)
viralKinetics=function(init,s,d,beta,delta,p,c,timelag,duration){
## MODEL COMPONENTS
## DOI: 10.1002/wsbm.129
## http://onlinelibrary.wiley.com/doi/10.1002/wsbm.129/full
## T: quantity of target cells
## I: quantity of infected cells2
## V: quantity of infectious viral particles
## s: supply rate of target cells
## d: death rate of target cells
## beta: infection rate
## delta: death rate of infected cells
## p: production rate of virus
## c: clearance rate of virus
## OTHER NOTATIONS
## init: initial state for T, I and V
## timelag: numerical time lag for solving the equation system
## duration: duration of infection
target=init$TT
infected=init$I
virus=init$V
time=seq(0,duration,by=timelag)
for(i in 1:(length(time)-1)){
## implicit method for ode resolution
target=c(target,target[i]/(1-timelag*(s-d)+timelag*beta*virus[i]))
infected=c(infected,(timelag*beta*target[i]*virus[i]+infected[i])/
(1+timelag*delta))
virus=c(virus,(timelag*p*infected[i]+virus[i])/(1+timelag*c))
}
## output: time, nb of target cells, nb of infected cells, nb of virions
return(data.frame(time,target,infected,virus))
}
kin1=viralKinetics(vpar1$init,vpar1$s,vpar1$d,vpar1$beta,vpar1$delta,vpar1$p,vpar1$c,vpar1$timelag,vpar1$duration)
## Scatter plot
par(mfrow=c(3,2))
plot(kin1$time,kin1$virus,ylab="Virion population",xlab="time")
scatter_plot(richness1,"Richness Estimator")
scatter_plot(shannon1, "Shannon Index")
scatter_plot(simpson1, "Simpson Index")
scatter_plot(pielou1,"Pielou Evenness")
scatter_plot(nuc1,"p-distance")
scatter_plot(jc1,"Jukes and Cantor distance")
scatter_plot(nei1,"Nei distance")
par(mfrow=c(3,2))
plot(kin1$time,kin1$virus,ylab="Virion population",xlab="time")
scatter_plot(richness1,"Richness Estimator")
scatter_plot(shannon1, "Shannon Index")
scatter_plot(simpson1, "Simpson Index")
scatter_plot(pielou1,"Pielou Evenness")
scatter_plot(nuc1,"p-distance")
par(mfrow=c(4,2))
plot(kin1$time,kin1$virus,ylab="Virion population",xlab="time")
scatter_plot(richness1,"Richness Estimator")
scatter_plot(shannon1, "Shannon Index")
scatter_plot(simpson1, "Simpson Index")
scatter_plot(pielou1,"Pielou Evenness")
scatter_plot(nuc1,"p-distance")
scatter_plot(jc1,"Jukes and Cantor distance")
scatter_plot(nei1,"Nei distance")
pg1=smooth_plot(richness1,richness2)
smooth_plot=function(data1,data2,comp){
# file1 must be the reference (gamma, no fitnessÄ±)
newdata=data.frame(data1$Time,data1$indice,data2$indice)
colnames(newdata)
if (comp=="Gamma"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
if (comp=="fitness"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
newdata=melt(newdata,id.vars="time")
pl=ggplot(newdata,aes(x=time,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
return(pl)
}
pg1=smooth_plot(richness1,richness2)
pg1=smooth_plot(richness1,richness2,"Gamma")
print(pg1)
scatter_plot=function(data,ylab,colour){
plot(data$Time,data$indice,ylab=ylab,xlab="time",col=colour)
return(data)
}
smooth_plot=function(data1,data2,comp,index){
# file1 must be the reference (gamma, no fitnessÄ±)
newdata=data.frame(data1$Time,data1$indice,data2$indice)
colnames(newdata)
if (comp=="Gamma"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
if (comp=="fitness"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
newdata=melt(newdata,id.vars="time")
pl=ggplot(newdata,aes(x=time,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()+ylab(index)
return(pl)
}
pg1=smooth_plot(richness1,richness2,"Gamma",index="Richness Estimator")
print(pg1)
pg2=smooth_plot(shannon1,shannon2,"Gamma",index="Shannon Index")
pg3=smooth_plot(simpson1,simpson2,"Gamma",index="Simpson Index")
pg4=smooth_plot(pielou1,pielou2,"Gamma",index="Pielou Evenness")
pg5=smooth_plot(nuc1,nuc2,"Gamma",index="p-distance")
pg6=smooth_plot(jc1,jc2,"Gamma",index="Jukes and Cantor distance")
pg7=smooth_plot(nei1,nei2,"Gamma",index="Nei distance")
multiplot(pg1,pg2,pg3,pg4,pg5,pg6,pg7,cols=2)
pf1=smooth_plot(richness1,richness3,"fitness",index="Richness estimator")
pf2=smooth_plot(shannon1,shannon3,"fitness",index="Shannon Index")
pf3=smooth_plot(simpson1,simpson3,"fitness",index="Simpson Index")
pf4=smooth_plot(pielou1,pielou3,"fitness",index="Pielou Evenness")
pf5=smooth_plot(nuc1,nuc3,"fitness",index="p-distance")
pf6=smooth_plot(jc1,jc3,"fitness",index="Jukes and Cantor distance")
pf7=smooth_plot(nei1,nei3,"fitness",index="Nei distance")
multiplot(pf1,pf2,pf3,pf4,pf5,pf6,pf7,cols=2)
smooth_plot=function(data1,data2,comp,index){
# file1 must be the reference (gamma, no fitnessÄ±)
newdata=data.frame(data1$Time,data1$indice,data2$indice)
colnames(newdata)
if (comp=="Gamma"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
if (comp=="fitness"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
newdata=melt(newdata,id.vars="time")
pl=ggplot(newdata,aes(x=time,y=value,colour=variable))+geom_smooth(aes(fill=variable),method="loess")+theme_classic()+ylab(index)
return(pl)
}
smooth_plot=function(data1,data2,comp,index){
# file1 must be the reference (gamma, no fitnessÄ±)
newdata=data.frame(data1$Time,data1$indice,data2$indice)
colnames(newdata)
if (comp=="Gamma"){
colnames(newdata)=c("time","Gamma","No Gamma")
}
if (comp=="fitness"){
colnames(newdata)=c("time","No fitness","Fitness")
}
newdata=melt(newdata,id.vars="time")
pl=ggplot(newdata,aes(x=time,y=value,colour=variable))+geom_smooth(aes(fill=variable),method="loess")+theme_classic()+ylab(index)
return(pl)
}
pf1=smooth_plot(richness1,richness3,"fitness",index="Richness estimator")
pf2=smooth_plot(shannon1,shannon3,"fitness",index="Shannon Index")
pf3=smooth_plot(simpson1,simpson3,"fitness",index="Simpson Index")
pf4=smooth_plot(pielou1,pielou3,"fitness",index="Pielou Evenness")
pf5=smooth_plot(nuc1,nuc3,"fitness",index="p-distance")
pf6=smooth_plot(jc1,jc3,"fitness",index="Jukes and Cantor distance")
pf7=smooth_plot(nei1,nei3,"fitness",index="Nei distance")
multiplot(pf1,pf2,pf3,pf4,pf5,pf6,pf7,cols=2)
multiplot(pg1,pg2,pg3,pg4,pg5,pg6,pg7,cols=2)
par(mfrow=c(4,2))
plot(kin1$time,kin1$virus,ylab="Virion population",xlab="time")
scatter_plot(richness1,"Richness Estimator",colour="forestgreen")
scatter_plot(shannon1, "Shannon Index",colour="mediumorchid")
scatter_plot(simpson1, "Simpson Index",colour="dodgerblue4")
scatter_plot(pielou1,"Pielou Evenness",colour="deeppink3")
scatter_plot(nuc1,"p-distance",colour="springgreen2")
scatter_plot(jc1,"Jukes and Cantor distance",colour="firebrick2")
scatter_plot(nei1,"Nei distance",colour="steelblue1")
