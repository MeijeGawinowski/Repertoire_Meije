setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_nogamma")
data_beta=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta=read.table("data_delta.csv",sep=",",header=TRUE)
data_p=read.table("data_p.csv",sep=",",header=TRUE)
data_c=read.table("data_c.csv",sep=",",header=TRUE)
data_beta_n=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_n=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_n=read.table("data_p.csv",sep=",",header=TRUE)
data_c_n=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_n=read.table("data_mu.csv",sep=",",header=TRUE)
data_mu_n=read.table("data_m.csv",sep=",",header=TRUE)
data_beta_n$t
data_beta_n$par
length(data_beta_n$par)
length(data_beta_n$dist)
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta=read.table("data_beta_t3.csv",sep=",",head=TRUE)
length(data_beta$dist)
colnames(data_beta)=c("par","dist")
length(data_beta$dist)
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta=read.table("data_delta.csv",sep=",",header=TRUE)
data_p=read.table("data_p.csv",sep=",",header=TRUE)
data_c=read.table("data_c.csv",sep=",",header=TRUE)
data_mu=read.table("data_m.csv",sep=",",header=TRUE)
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_nogamma")
data_beta_n=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_n=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_n=read.table("data_p.csv",sep=",",header=TRUE)
data_c_n=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_n=read.table("data_m.csv",sep=",",header=TRUE)
length(data_beta$par)
length(data_beta_n$par)
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","Gamma","No gamma")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=par,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
Graph_loess(data_beta,data_beta_n,"Title")
library(reshape2)
Graph_loess(data_beta,data_beta_n,"Title")
library(ggplot2)
Graph_loess(data_beta,data_beta_n,"Title")
data=data.frame(data_beta$par,data_beta$dist,data_beta_n$dist)
colnames(data)=c("Parameter","Gamma","No gamma")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=par,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
pl=pl+xlab("Parameter")+ylab("p-distance")
print(pl)
pl=ggplot(data=data,aes(x=par,y=value,colour=variable))+geom_point()
print(pl)
plot(data_beta$par,data_beta$dist)
pt=ggplot(data_beta,aes(x=par,y=dist))+geom_smooth()
print(pt)
head(data)
data
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","Gamma","No gamma")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
r1=ggplot(data_r1,aes(x=time,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
Graph_loess(data_beta,data_beta_n,"Title")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p_beta=Graph_loess(data_beta,data_beta_n,"Beta parameter")
p_delta=Graph_loess(data_delta,data_delta_n,"Delta parameter")
multiplot(p_beta,p_delta,cols=2)
multiplot(p_p,p_c,cols=2)
p_p=Graph_loess(data_p,data_p_n,"p parameter")
p_c=Graph_loess(data_c,data_c_n,"c parameter")
p_m=Graph_loess(data_mu,data_mu_n,"mu parameter")
multiplot(p_p,p_c,cols=2)
print(p_m)
rm(list=ls())
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_fitness")
data_beta_f=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_f=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_f=read.table("data_p.csv",sep=",",header=TRUE)
data_c_f=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_f=read.table("data_m.csv",sep=",",header=TRUE)
data_g1_f=read.table("data_g1.csv",sep=",")
data_g2_f=read.table("data_g2.csv",sep=",")
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta=read.table("data_delta.csv",sep=",",header=TRUE)
data_p=read.table("data_p.csv",sep=",",header=TRUE)
data_c=read.table("data_c.csv",sep=",",header=TRUE)
data_mu=read.table("data_m.csv",sep=",",header=TRUE)
Graph_loess=function(data1,data2,main){
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","Gamma","No gamma")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p_beta=Graph_loess(data_beta,data_beta_n,"Beta parameter")
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","No fitness","Fitness")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
p_beta=Graph_loess(data_beta,data_beta_f,"Beta parameter")
p_delta=Graph_loess(data_delta,data_delta_f,"Delta parameter")
p_p=Graph_loess(data_p,data_p_f,"p parameter")
p_c=Graph_loess(data_c,data_c_f,"c parameter")
p_m=Graph_loess(data_mu,data_mu_f,"mu parameter")
p_g1=Graph_loess(data_g1,data_g1_f,"gamma1 parameter")
p_g2=Graph_loess(data_g1,data_g1_f,"gamma2 parameter")
data_g1_f=read.table("data_g1.csv",sep=",")
data_g2_f=read.table("data_g2.csv",sep=",")
rm(list=ls())
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_fitness")
data_beta_f=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_f=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_f=read.table("data_p.csv",sep=",",header=TRUE)
data_c_f=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_f=read.table("data_m.csv",sep=",",header=TRUE)
data_g1_f=read.table("data_g1.csv",sep=",")
data_g2_f=read.table("data_g2.csv",sep=",")
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta=read.table("data_delta.csv",sep=",",header=TRUE)
data_p=read.table("data_p.csv",sep=",",header=TRUE)
data_c=read.table("data_c.csv",sep=",",header=TRUE)
data_mu=read.table("data_m.csv",sep=",",header=TRUE)
data_g1=read.table("data_g1.csv",sep=",")
data_g2=read.table("data_g2.csv",sep=",")
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","No fitness","Fitness")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p_beta=Graph_loess(data_beta,data_beta_f,"Beta parameter")
p_delta=Graph_loess(data_delta,data_delta_f,"Delta parameter")
p_p=Graph_loess(data_p,data_p_f,"p parameter")
p_c=Graph_loess(data_c,data_c_f,"c parameter")
p_m=Graph_loess(data_mu,data_mu_f,"mu parameter")
p_g1=Graph_loess(data_g1,data_g1_f,"gamma1 parameter")
p_g2=Graph_loess(data_g1,data_g1_f,"gamma2 parameter")
length(data_mu$par)
length(data_mu$dist)
length(data_mu_f$dist)
length(data_mu_f$par)
length(data_g1$par)
length(data_g1_f$par)
length(data_g1_f$dist)
rm(list=ls())
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_fitness")
data_beta_f=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_f=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_f=read.table("data_p.csv",sep=",",header=TRUE)
data_c_f=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_f=read.table("data_m.csv",sep=",",header=TRUE)
data_g1_f=read.table("data_g1.csv",sep=",")
data_g2_f=read.table("data_g2.csv",sep=",")
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
rm(list=ls())
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_fitness")
data_beta_f=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_f=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_f=read.table("data_p.csv",sep=",",header=TRUE)
data_c_f=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_f=read.table("data_m.csv",sep=",",header=TRUE)
rm(list=ls())
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_fitness")
data_beta_f=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_f=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_f=read.table("data_p.csv",sep=",",header=TRUE)
data_c_f=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_f=read.table("data_m.csv",sep=",",header=TRUE)
data_g1_f=read.table("data_g1.csv",sep=",")
data_g2_f=read.table("data_g2.csv",sep=",")
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta=read.table("data_delta.csv",sep=",",header=TRUE)
data_p=read.table("data_p.csv",sep=",",header=TRUE)
data_c=read.table("data_c.csv",sep=",",header=TRUE)
data_mu=read.table("data_m.csv",sep=",",header=TRUE)
data_g1=read.table("data_g1.csv",sep=",")
data_g2=read.table("data_g2.csv",sep=",")
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","No fitness","Fitness")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p_beta=Graph_loess(data_beta,data_beta_f,"Beta parameter")
p_delta=Graph_loess(data_delta,data_delta_f,"Delta parameter")
p_p=Graph_loess(data_p,data_p_f,"p parameter")
p_c=Graph_loess(data_c,data_c_f,"c parameter")
p_m=Graph_loess(data_mu,data_mu_f,"mu parameter")
p_g1=Graph_loess(data_g1,data_g1_f,"gamma1 parameter")
p_g2=Graph_loess(data_g1,data_g1_f,"gamma2 parameter")
multiplot(p_beta,p_delta,cols=2)
multiplot(p_p,p_c,cols=2)
multiplot(p_m,p_g1,cols=2)
print(p_g2)
rm(list=ls())
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_nogamma")
data_beta_n=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_n=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_n=read.table("data_p.csv",sep=",",header=TRUE)
data_c_n=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_n=read.table("data_m.csv",sep=",",header=TRUE)
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta=read.table("data_delta.csv",sep=",",header=TRUE)
data_p=read.table("data_p.csv",sep=",",header=TRUE)
data_c=read.table("data_c.csv",sep=",",header=TRUE)
data_mu=read.table("data_m.csv",sep=",",header=TRUE)
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","Gamma","No gamma")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p_beta=Graph_loess(data_beta,data_beta_n,"Beta parameter")
p_delta=Graph_loess(data_delta,data_delta_n,"Delta parameter")
p_p=Graph_loess(data_p,data_p_n,"p parameter")
p_c=Graph_loess(data_c,data_c_n,"c parameter")
p_m=Graph_loess(data_mu,data_mu_n,"mu parameter")
multiplot(p_beta,p_delta,cols=2)
multiplot(p_p,p_c,cols=2)
print(p_m)
