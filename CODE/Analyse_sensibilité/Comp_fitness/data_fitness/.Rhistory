Temp=airquality_app$Temp
airquality=airquality[complete.cases(airquality),]
airquality=airquality[airquality$Ozone<110,]
dim(airquality)
cor(airquality)
ind_app=sample(1:105,80)
airquality_app=airquality[ind_app,]
airquality_test=airquality[-ind_app,]
plot(airquality_app$Temp,airquality_app$Ozone)
Ozone=airquality_app$Ozone
Temp=airquality_app$Temp
plot(Temp,Ozone,main="Smoothing Splines")
Ozone.spl=smooth.spline(Temp,Ozone)
Ozone.spl$df
Ozone.spl$lambda
lines(Ozone.spl,col="blue")
library(ggplot2)
lines(smooth.spline(Temp,Ozone,df=15),lty=2,col="red")
plot(Temp,Ozone,main="Smoothing Splines")
plot(time,ind1)
lines(div.spl,col="blue")
lines(div.spl$x,div.spl$y+err1,col=2)
err1=qnorm(0.95)*sd(div.spl$x)/sqrt(length(div.spl$x))
lines(div.spl$x,div.spl$y+err1,col=2)
qnorm(0.95)
sd(div.spl$x)
err1
ind2=data1$richness2
ind3=data1$richness3
plot(time,ind1)
plot(div.spl,col="blue",type="l")
div.spl2=smooth.spline(time,ind2)
lines(div.spl2,col="red")
div.spl3=smooth.spline(time,ind3)
lines(div.spl3,col="green")
plot(div.spl2,col="red",type="l")
lines(div.spl,col="blue",type="l")
plot(div.spl2,col="red",type="l")
plot(div.spl2,col="red",type="l")
lines(div.spl,col="blue",type="l")
lines(div.spl3,col="green")
data2=read.table("data_shannon.csv",sep=",",header=TRUE)
head(data2)
data2=read.table("data_shannon.csv",sep="\t",header=TRUE)
head(data2)
time=data2$time
ind1=data2$shannon1
ind2=data2$shannon2
ind3=data3$shannon3
ind3=data2$shannon3
plot(div.spl2,col="red",type="l")
div.spl=smooth.spline(time,ind1)
div.spl2=smooth.spline(time,ind2)
div.spl3=smooth.spline(time,ind3)
plot(div.spl2,col="red",type="l")
lines(div.spl,col="blue",type="l")
lines(div.spl3,col="green")
data3=read.table("data_shannon.csv",sep="\t",header=TRUE)
time=data3$time
ind1=data3$shannon1
ind2=data3$shannon2
ind3=data3$shannon3
div.spl=smooth.spline(time,ind1)
div.spl2=smooth.spline(time,ind2)
div.spl3=smooth.spline(time,ind3)
plot(div.spl2,col="red",type="l")
lines(div.spl,col="blue",type="l")
lines(div.spl3,col="green")
data4=read.table("data_shannon.csv",sep="\t",header=TRUE)
time=data4$time
ind1=data4$shannon1
ind2=data4$shannon2
ind3=data4$shannon3
div.spl=smooth.spline(time,ind1)
div.spl2=smooth.spline(time,ind2)
div.spl3=smooth.spline(time,ind3)
plot(div.spl2,col="red",type="l")
ind11=data1$richness1
ind12=data1$richness2
ind13=data1$richness3
div.spl11=smooth.spline(time,ind11)
div.spl12=smooth.spline(time,ind12)
div.spl13=smooth.spline(time,ind13)
plot(div.spl12,col="red",type="l")
lines(div.spl11,col="blue",type="l")
lines(div.spl13,col="green")
ind21=data2$shannon1
ind22=data2$shannon2
ind23=data2$shannon3
div.spl21=smooth.spline(time,ind1)
div.spl22=smooth.spline(time,ind2)
div.spl23=smooth.spline(time,ind3)
plot(div.spl22,col="red",type="l")
lines(div.spl23,col="green")
lines(div.spl21,col="blue",type="l")
ind31=data3$shannon1
ind32=data3$shannon2
ind33=data3$shannon3
div.spl21=smooth.spline(time,ind21)
div.spl22=smooth.spline(time,ind22)
div.spl23=smooth.spline(time,ind23)
plot(div.spl22,col="red",type="l")
lines(div.spl23,col="green")
lines(div.spl21,col="blue",type="l")
ind31=data3$shannon1
ind32=data3$shannon2
ind33=data3$shannon3
div.spl31=smooth.spline(time,ind31)
div.spl32=smooth.spline(time,ind32)
div.spl33=smooth.spline(time,ind33)
plot(div.spl32,col="red",type="l")
lines(div.spl33,col="green")
lines(div.spl31,col="blue",type="l")
ind41=data4$shannon1
ind42=data4$shannon2
ind43=data4$shannon3
div.spl41=smooth.spline(time,ind41)
div.spl42=smooth.spline(time,ind42)
div.spl43=smooth.spline(time,ind43)
plot(div.spl2,col="red",type="l")
plot(div.spl42,col="red",type="l")
lines(div.spl43,col="green")
lines(div.spl41,col="blue",type="l")
time=data5$time
ind1=data5$shannon1
data5=read.table("data_pi.csv",sep="\t",header=TRUE)
setwd("~/Documents/Stage/Code/Diversité_intra(1)/div=f(t)")
data5=read.table("data_pi.csv",sep="\t",header=TRUE)
ls("~/Documents/Stage/Code/Diversité_intra(1)/div=f(t)")
setwd("~/Desktop")
data5=read.table("data_pi.csv",sep="\t",header=TRUE)
read.table("data_JC3.csv",sep="\t",header=TRUE)
read.table("data_nei.csv",sep="\t",header=TRUE)
setwd("~/Documents/Stage/Code/Diversité_intra(1)/div=f(t)")
data5=read.table("data_pi.csv",sep="\t",header=TRUE)
data6=read.table("data_JC3.csv",sep="\t",header=TRUE)
data3=read.table("data_simpson.csv",sep="\t",header=TRUE)
data4=read.table("data_pielou.csv",sep="\t",header=TRUE)
time=data4$time
ind41=data4$shannon1
ind42=data4$shannon2
ind43=data4$shannon3
div.spl41=smooth.spline(time,ind41)
div.spl42=smooth.spline(time,ind42)
div.spl43=smooth.spline(time,ind43)
plot(div.spl42,col="red",type="l")
lines(div.spl43,col="green")
lines(div.spl41,col="blue",type="l")
time=data4$time
library(ape)
library(vegan)
library(pegas)
library(poppr)
library(DiversitySampler)
library(untb)
# function that counts the number of non null elements in a vector
countProp=function(v){
c=0
for (i in 1:length(v)){
if (v[i] != 0){c=c+1}
}
return(c)
}
# function that turns a sample into DNAbin sequences
toDNAbin=function(samp,sequence){
# samp : indexes of the sampled sequences
# sequence : matrix with all the sequences
M=dim(sequence)[2]
v=matrix(0,nrow=length(samp),ncol=M)
for (i in 1:length(samp)){
v[i,]=sequence[samp[i],]
}
v=c(v)
v=as.character(v)
for (i in 1:length(v)){
if(v[i]=="1"){v[i]="A"}
if(v[i]=="2"){v[i]="C"}
if(v[i]=="3"){v[i]="G"}
if(v[i]=="4"){v[i]="T"}
}
v=as.DNAbin(matrix(c(v),ncol=M,nrow=length(samp)))
return(v)
}
## function that describes the viral kinetics in one host
viralKinetics=function(init,s,d,beta,delta,p,c,timelag,duration){
## MODEL COMPONENTS
## DOI: 10.1002/wsbm.129
## http://onlinelibrary.wiley.com/doi/10.1002/wsbm.129/full
## T: quantity of target cells
## I: quantity of infected cells2
## V: quantity of infectious viral particles
## s: supply rate of target cells
## d: death rate of target cells
## beta: infection rate
## delta: death rate of infected cells
## p: production rate of virus
## c: clearance rate of virus
## OTHER NOTATIONS
## init: initial state for T, I and V
## timelag: numerical time lag for solving the equation system
## duration: duration of infection
target=init$TT
infected=init$I
virus=init$V
time=seq(0,duration,by=timelag)
for(i in 1:(length(time)-1)){
## implicit method for ode resolution
target=c(target,target[i]/(1-timelag*(s-d)+timelag*beta*virus[i]))
infected=c(infected,(timelag*beta*target[i]*virus[i]+infected[i])/
(1+timelag*delta))
virus=c(virus,(timelag*p*infected[i]+virus[i])/(1+timelag*c))
}
## output: time, nb of target cells, nb of infected cells, nb of virions
return(data.frame(time,target,infected,virus))
}
# function that assesses diversity at each moment
intraHostDiversity=function(init=list(prop=1,sequ1=rep(1,10^4)),kinetics,mu,gamma,fitnessRule,method=1,size=2){
## mu: mutation rate per nucleotide, per virus particle (i.e. virion), per unit of time
## gamma : evolution rates (effects of the environment)
## tolerance: discard variants with proportions less than tolerance
## fitnessRule: function determining how fit is a variant
if(nrow(kinetics)==1){browser()}
M=length(init[[2]])
lags=diff(kinetics$time)
nmutation=0
## initialize the composition of variants
compo=init
## number of information elements provided in compo before the sequences (here, only 1 : prop)
ninfo=1
## compute fitness for initial variants
fitness=NULL
for(k in (ninfo+1):length(compo)){
fitness=c(fitness,fitnessRule(compo[[k]]))
}
nb_vector=c()
Richness=c()
Time=c()
Shannon=c()
indice=c()
for(i in 2:length(kinetics$time)){
if (kinetics$virus[i] >= 1){
print(i)
Time=c(Time,i)
## draw the number of mutations for time step i
nmut=rpois(1,mu*M*kinetics$virus[i-1]*lags[i-1])
nmutation=c(nmutation,nmut)
if(nmut>0){
propCand=rep(1,nmut)
## draw which variants are used for generating new variants
mutatingSequ=sample(x=1:(length(compo)-ninfo),size=length(propCand),
replace=TRUE,prob=compo$prop)
## update the vector of proportions
compo$prop=c(compo$prop*(1-nmut/kinetics$virus[i-1]),
propCand*nmut/kinetics$virus[i-1])
## draw the mutations
for(k in 1:length(propCand)){
newsequ=compo[[ninfo+mutatingSequ[k]]]
mutatingNucl=sample(1:M,1)
newsequ[mutatingNucl]=
sample((1:4)[(1:4)!=newsequ[mutatingNucl]],1)
compo=c(compo,list(newsequ))
## compute fitness of new variants
fitness=c(fitness,fitnessRule(newsequ))
}
}
## multiplication probability depends on fitness
pmult=compo$prop*fitness
pmult=pmult/sum(pmult)
pmult=rnorm(length(pmult),mean=pmult,sd=sqrt(gamma[1]*pmult*(1-pmult)^gamma[2]))
pmult=pmin(1,pmax(0,pmult))
## check that pmult is a probability
compo$prop=as.numeric(rmultinom(n=1,size=kinetics$virus[i],
prob=pmult))
compo$prop=compo$prop/sum(compo$prop)
## compute new proportions of variants
proportion=compo$prop
N=length(proportion)
sequence=matrix(0,N,M)
for(k in 1:N){
sequence[k,]=compo[[ninfo+k]]
}
## Richness estimator
if (method==1){
indice=c(indice,countProp(compo$prop))
}
## Shannon Diversity Index
if (method==2){
nb=compo$prop*kinetics$virus[i]
H1=diversity(nb,index="shannon",base=exp(1))
indice=c(indice,H1)
}
## Simpson Index
if (method==3){
nb=compo$prop*kinetics$virus[i]
H2=diversity(nb,index="simpson")
indice=c(indice,H2)
}
## Pielou's Evenness
if(method==4){
Richness=c(Richness,countProp(compo$prop))
nb=compo$prop*kinetics$virus[i]
Shannon=c(Shannon,diversity(nb,index="shannon",base=exp(1)))
indice=Shannon/log10(Richness)
}
## Nucleotide Diversity or p-distance
if(method==5){
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,nuc.div(seq))
}
## Jukes and Cantor Distance
if(method==6){
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,mean(dist.dna(seq,model="JC69")))
}
## Nei Distance
if(method==7){
samp=sample(x=1:(length(compo)-ninfo),size=size,replace=TRUE,prob=compo$prop)
seq=toDNAbin(samp,sequence)
indice=c(indice,mean(nei.dist(as.genind(seq))))
}
}
}
return(list(t=Time,indice=indice))
}
## WITHIN-HOST DIVERSITY ASSESSMENT (NO FITNESS RULE)
vpar1=list(init=list(TT=1e12,I=0,V=1e03),s=0,d=0,beta=5.0e-05,delta=2.0,p=1e-06,c=0.5,timelag=0.1,duration=45)
kin1 = viralKinetics(init=vpar1$init,vpar1$s,vpar1$d,vpar1$beta,vpar1$delta,vpar1$p,vpar1$c,vpar1$timelag,vpar1$duration)
spar1=list(init=list(prop=1,sequ1=rep(1,1000)),mu=5e-06,gamma=c(0.001,1000),tolerance=1e-05)
spar2=list(init=list(prop=1,sequ1=rep(1,1000)),mu=5e-06,gamma=c(0,1000),tolerance=1e-05)
fpar2=function(sequ){
M=length(sequ)
return(1*(1+9*mean(sequ[1:round(0.1*M)]==2))/
(1+9*mean(sequ[1:round(0.1*M)]==3)))
}
fpar1=function(sequ){ return(1) }
simpson1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=3)
simpson2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=3)
simpson3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=3)
nucdiv1=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar1,method=5,size=100)
nucdiv2=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar2$gamma,fitnessRule=fpar1,method=5,size=100)
nucdiv3=intraHostDiversity(init=spar1$init,kinetics=kin1,mu=spar1$mu,gamma=spar1$gamma,fitnessRule=fpar2,method=5,size=100)
data_pi=data.frame(nucdiv1$t,nucdiv1$indice,nucdiv2$indice,nucdiv3$indice)
colnames(data_pi)=c("time","pi1","pi2","pi3")
write.table(data_pi,"data_pi.cvs",sep="\t")
data_simpson=data.frame(simpson1$t,simpson1$indice,simpson2$indice,simpson3$indice)
colnames(data_simpson)=c("time","simpson1","simpson2","simpson3")
write.table(data_simpson,"data_simpson.cvs",sep="\t")
length(simpson1)
length(simpson1$t)
length(simpson2$t)
length(simpson3$t)
head(data_pi)
data3=read.table("data_simpson.csv",sep="\t",header=TRUE)
write.table(data_simpson,"data_simpsonb.cvs",sep="\t")
data3=read.table("data_simpsonb.csv",sep="\t",header=TRUE)
setwd("~/Documents/Stage/Code/Diversité_intra(1)/div=f(t)")
data_simpson
setwd("~/Documents/Stage/Code/Diversité_intra(1)/div=f(t)")
rm(list=ls())
data3=read.table("data_simpsonb.csv",sep="\t",header=TRUE)
rm(list=ls())
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_fitness")
data_beta_f=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_f=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_f=read.table("data_p.csv",sep=",",header=TRUE)
data_c_f=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_f=read.table("data_m.csv",sep=",",header=TRUE)
data_g1_f=read.table("data_g1.csv",sep=",")
data_g2_f=read.table("data_g2.csv",sep=",")
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta=read.table("data_delta.csv",sep=",",header=TRUE)
data_p=read.table("data_p.csv",sep=",",header=TRUE)
data_c=read.table("data_c.csv",sep=",",header=TRUE)
data_mu=read.table("data_m.csv",sep=",",header=TRUE)
data_g1=read.table("data_g1.csv",sep=",")
data_g2=read.table("data_g2.csv",sep=",")
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","No fitness","Fitness")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable))+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(reshape2)
library(ggplot2)
p_beta=Graph_loess(data_beta,data_beta_f,"Beta parameter")
p_delta=Graph_loess(data_delta,data_delta_f,"Delta parameter")
p_p=Graph_loess(data_p,data_p_f,"p parameter")
p_c=Graph_loess(data_c,data_c_f,"c parameter")
p_m=Graph_loess(data_mu,data_mu_f,"mu parameter")
p_g1=Graph_loess(data_g1,data_g1_f,"gamma1 parameter")
p_g2=Graph_loess(data_g1,data_g1_f,"gamma2 parameter")
multiplot(p_c,p_m,p_g1,p_g2,cols=2)
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","No fitness","Fitness")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable),method="loess")+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
p_beta=Graph_loess(data_beta,data_beta_f,"Beta parameter")
p_delta=Graph_loess(data_delta,data_delta_f,"Delta parameter")
p_p=Graph_loess(data_p,data_p_f,"p parameter")
p_c=Graph_loess(data_c,data_c_f,"c parameter")
p_m=Graph_loess(data_mu,data_mu_f,"mu parameter")
p_g1=Graph_loess(data_g1,data_g1_f,"gamma1 parameter")
p_g2=Graph_loess(data_g1,data_g1_f,"gamma2 parameter")
multiplot(p_beta,p_delta,p_p,cols=3)
multiplot(p_c,p_m,p_g1,p_g2,cols=2)
multiplot(p_beta,p_delta,p_p,cols=3)
rm(list=ls())
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data_nogamma")
data_beta_n=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta_n=read.table("data_delta.csv",sep=",",header=TRUE)
data_p_n=read.table("data_p.csv",sep=",",header=TRUE)
data_c_n=read.table("data_c.csv",sep=",",header=TRUE)
data_mu_n=read.table("data_m.csv",sep=",",header=TRUE)
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta=read.table("data_beta.csv",sep=",",head=TRUE)
data_delta=read.table("data_delta.csv",sep=",",header=TRUE)
data_p=read.table("data_p.csv",sep=",",header=TRUE)
data_c=read.table("data_c.csv",sep=",",header=TRUE)
data_mu=read.table("data_m.csv",sep=",",header=TRUE)
Graph_loess=function(data1,data2,main){
# par=data[,2]
# div=data[,3]
# newdata=data.frame(par,div)
data=data.frame(data1$par,data1$dist,data2$dist)
colnames(data)=c("Parameter","Gamma","No gamma")
data=melt(data,id.vars="Parameter")
pl=ggplot(data=data,aes(x=Parameter,y=value,colour=variable))+geom_smooth(aes(fill=variable),method="loess")+theme_classic()
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
p_beta=Graph_loess(data_beta,data_beta_n,"Beta parameter")
p_delta=Graph_loess(data_delta,data_delta_n,"Delta parameter")
p_p=Graph_loess(data_p,data_p_n,"p parameter")
p_c=Graph_loess(data_c,data_c_n,"c parameter")
p_m=Graph_loess(data_mu,data_mu_n,"mu parameter")
multiplot(p_beta,p_delta,p_p,cols=3)
multiplot(p_beta,p_delta,cols=2)
multiplot(p_p,p_c,p_m,cols=3)
10+1+3+1+1
5+7+11
setwd("~/Desktop/Répertoire_MeijeGawinowski/CODE/Analyse_sensibilité/Comp_fitness/data_fitness")
