trans=NULL
for(i in (1:length(transold))[-nextinfection]){
trans=c(trans,list(transold[[i]]))
}
## withdrawal of the host in trans
vpar$init$V=transinit$transmittedVirus
## in the new host, initial V is transmittedVirus
vK=viralKinetics(vpar$init,vpar$s,vpar$d,vpar$beta,
vpar$delta,vpar$p,vpar$c,vpar$timelag,vpar$duration)
## viral kinetics in the new host
vK$time=vK$time+transinit$transmittedTime
## time begins after transmission
transtime=transmit(tpar$lambda,tpar$virusmax,nsusceptible,vK)
## transmission times from current host to other individuals
# trans=c(trans,withinHostData(init=c(list(time=transinit$transmittedTime),
#                                     transinit$transmittedInit),
#                              kinetics=vK,mu=spar$mu,gamma=spar$gamma,tolerance=spar$tolerance,fitnessRule=fpar,
#                              observationTime=sample(vK$time[vK$time>=vK$time[1]+opar$timemin &
#                                                               vK$time<=vK$time[1]+opar$timemax],1),
#                              samplesize=sample(opar$nsequmin:opar$nsequmax,1),
#                              directory=directory,identifier=idmin+k,
#                              transmissionTime=transtime,transmissionRate=tpar$rate))
if (choice==k){
obs=c(obs,DataObservation(init=c(list(time=transinit$transmittedTime),
transinit$TransmittedInit),
kinetics=vK,mu=spar$mu,gamma=spar$gamma,tolerance=spar$tolerance,
fitnessRule=fpar,samplesize=samplesize,directory=directory,idenifier=idmin+k))
}
trans=c(trans,DataTransmission(init=c(list(time=transinit$transmittedTime),
transinit$transmittedInit),
kinetics=vK,mu=spar$mu,gamma=spar$gamma,tolerance=spar$tolerance,
fitnessRule=fpar, samplesize=samplesize,identifier=idmin+k,
transmissionTime=transtime,transmissionRate=tpar$rate))
}
write.table(STdyn,paste(directory,"tree.txt",sep=""))
return(STdyn)
## output : STdyn is the chain of transmission (describes who infected who and when)
}
test1=outbreak.chain(vpar=vpar1,tpar=tpar1,spar=spar1,fpar=fpar1,opar=opar1,chainlength=20,directory="Simu1",choice=1,samplesize=sampsize1)
test1=outbreak.chain(vpar=vpar1,tpar=tpar1,spar=spar1,fpar=fpar1,opar=opar1,chainlength=20,directory="Simu1",choice=1,samplesize=sampsize1)
test1=outbreak.chain(vpar=vpar1,tpar=tpar1,spar=spar1,fpar=fpar1,opar=opar1,chainlength=20,directory="Simu1",choice=1,samplesize=sampsize1)
90/60
7+7+7.5+7.5+6.5
rm(list=ls())
library(KernSmooth) # dpill function
library(mgcv) # gam function
setwd("~/Documents/Stage/Code/Diversité_intra/analyse_sensibilité/data")
nsimu=5
data_beta2=read.table("data_beta_t2.csv",header=TRUE,sep=",")
data_delta2=read.table("data_delta_t2.csv",header=TRUE,sep=",")
data_p2=read.table("data_p_t2.csv",header=TRUE,sep=",")
data_c2=read.table("data_c_t2.csv",header=TRUE,sep=",")
data_mu2=read.table("data_mu_t2.csv",header=TRUE,sep=",")
data_gamma12=read.table("data_gamma1_t2.csv",header=TRUE,sep=",")
data_gamma22=read.table("data_gamma2_t2.csv",header=TRUE,sep=",")
# t=2.5
data_beta25=read.table("data_beta_t25.csv",header=TRUE,sep=",")
data_delta25=read.table("data_delta_t25.csv",header=TRUE,sep=",")
data_p25=read.table("data_p_t25.csv",header=TRUE,sep=",")
data_c25=read.table("data_c_t25.csv",header=TRUE,sep=",")
data_mu25=read.table("data_mu_t25.csv",header=TRUE,sep=",")
data_gamma125=read.table("data_gamma1_t25.csv",header=TRUE,sep=",")
data_gamma225=read.table("data_gamma2_t25.csv",header=TRUE,sep=",")
# t=3
data_beta3=read.table("data_beta_t3.csv",header=TRUE,sep=",")
data_delta3=read.table("data_delta_t3.csv",header=TRUE,sep=",")
data_p3=read.table("data_p_t3.csv",header=TRUE,sep=",")
data_c3=read.table("data_c_t3.csv",header=TRUE,sep=",")
data_mu3=read.table("data_mu_t3.csv",header=TRUE,sep=",")
data_gamma13=read.table("data_gamma1_t3.csv",header=TRUE,sep=",")
data_gamma23=read.table("data_gamma2_t3.csv",header=TRUE,sep=",")
# t=15
data_beta15=read.table("data_beta_t15.csv",header=TRUE,sep=",")
data_delta15=read.table("data_delta_t15.csv",header=TRUE,sep=",")
data_p15=read.table("data_p_t15.csv",header=TRUE,sep=",")
data_c15=read.table("data_c_t15.csv",header=TRUE,sep=",")
data_mu15=read.table("data_mu_t15.csv",header=TRUE,sep=",")
data_gamma115=read.table("data_gamma1_t15.csv",header=TRUE,sep=",")
data_gamma215=read.table("data_gamma2_t15.csv",header=TRUE,sep=",")
setwd("~/Documents/Stage/Code/Diversité_intra/analyse_sensibilité/data")
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
data_beta2=read.table("data_beta_t2.csv",header=TRUE,sep=",")
data_delta2=read.table("data_delta_t2.csv",header=TRUE,sep=",")
data_p2=read.table("data_p_t2.csv",header=TRUE,sep=",")
data_c2=read.table("data_c_t2.csv",header=TRUE,sep=",")
data_mu2=read.table("data_mu_t2.csv",header=TRUE,sep=",")
data_gamma12=read.table("data_gamma1_t2.csv",header=TRUE,sep=",")
data_gamma22=read.table("data_gamma2_t2.csv",header=TRUE,sep=",")
# t=2.5
data_beta25=read.table("data_beta_t25.csv",header=TRUE,sep=",")
data_delta25=read.table("data_delta_t25.csv",header=TRUE,sep=",")
data_p25=read.table("data_p_t25.csv",header=TRUE,sep=",")
data_c25=read.table("data_c_t25.csv",header=TRUE,sep=",")
data_mu25=read.table("data_mu_t25.csv",header=TRUE,sep=",")
data_gamma125=read.table("data_gamma1_t25.csv",header=TRUE,sep=",")
data_gamma225=read.table("data_gamma2_t25.csv",header=TRUE,sep=",")
# t=3
data_beta3=read.table("data_beta_t3.csv",header=TRUE,sep=",")
data_delta3=read.table("data_delta_t3.csv",header=TRUE,sep=",")
data_p3=read.table("data_p_t3.csv",header=TRUE,sep=",")
data_c3=read.table("data_c_t3.csv",header=TRUE,sep=",")
data_mu3=read.table("data_mu_t3.csv",header=TRUE,sep=",")
data_gamma13=read.table("data_gamma1_t3.csv",header=TRUE,sep=",")
data_gamma23=read.table("data_gamma2_t3.csv",header=TRUE,sep=",")
# t=15
data_beta15=read.table("data_beta_t15.csv",header=TRUE,sep=",")
data_delta15=read.table("data_delta_t15.csv",header=TRUE,sep=",")
data_p15=read.table("data_p_t15.csv",header=TRUE,sep=",")
data_c15=read.table("data_c_t15.csv",header=TRUE,sep=",")
data_mu15=read.table("data_mu_t15.csv",header=TRUE,sep=",")
data_gamma115=read.table("data_gamma1_t15.csv",header=TRUE,sep=",")
data_gamma215=read.table("data_gamma2_t15.csv",header=TRUE,sep=",")
noyau=function(z,X,Y,h){
A=(z-X)/h
Vect=exp(-0.5*(A**2))/(sqrt(2*pi))
noyau=(sum(Y*Vect))/(sum(Vect))
}
Gauss=function(t){
return(exp(-0.5*(t**2))/(sqrt(2*pi)))
}
df_ker=function(par,div){
bd=dpill(par,div)
S=matrix(0,le,le)
for (i in 1:le){
for (j in 1:le){
S[i,j]=Gauss( (div[i]-div[j])/bd ) / bd
}
}
for (i in 1:le){
for (j in 1:le){
S[i,j]=S[i,j]/sum(S)
}
}
return(tr(S))
}
Graph=function(data,name){
par=data[,2]
div=data[,3]
plot(par,div,xlab="parameter",ylab="p-distance",main=name)
}
Reg_lm=function(data,graph,name){
par=data[,2]
div=data[,3]
lm1=lm(div~par)
if (graph=="predict"){
plot(par,div,xlab="parameter",ylab="p-distance",main=name)
lines(par,predict(lm1),col=4,lwd=3)
return(summary(lm1)$r.squared)
}
if (graph=="check"){
plot(lm1,c(1,2,3,4))
return(shapiro.test(residuals(lm1))$p.value)
}
}
Reg_spl=function(data,name){
par=data[,2]
div=data[,3]
div.spl=smooth.spline(par,div)
plot(par,div,xlab="parameter",ylab="p-distance",main=name)
lines(div.spl,col=4,lwd=3)
df=div.spl$df
err=sqrt((mean(div.spl$y-div)**2))
value=err/(1-df/length(par))^2
return(list(value=value,err=err,df=df))
}
Reg_ker=function(data,name){
par=data[,2]
div=data[,3]
bd=dpill(par,div)
ker=ksmooth(par,div,bandwidth=bd)
l=length(par)
pred=c(rep(0,l))
for (j in 1:l){
pred[j]=noyau(par[j],par,div,bd)
}
err=sqrt(mean((pred-div)**2))
plot(par,div,xlab="parameter",ylab="p-distance",main=name)
df=df_ker(par,div)
value=err/(1-df/length(par))^2
lines(ker$x,ker$y,col=4,lwd=3)
return(list(value=value,err=err,df=df))
}
Reg_loess=function(data,name,graph){
par=data[,2]
div=data[,3]
len=length(par)/nsimu
data_par=data.frame(par,div)
l=loess(div~par,data=data_par,model=TRUE)
if (graph=="predict"){
plot(par,div,xlab="parameter",ylab="p-distance",main=name)
lines(par[1:len],predict(l)[1:len],col=4,lwd=3)
df=l$trace.hat
err=sqrt(mean((predict(l)-div)**2))
value=err/(1-df/length(par))^2
return(list(value=value,err=err,df=df))
}
if (graph=="check"){
res=l$residuals[1:len]
fit=l$fitted[1:len]
plot(fit,res,xlab="Fitted",yla="Residuals",main="Residuals Vs Fitted")
abline(h=0,lwd=2,col=2)
qqnorm(res,xlab="Theoretical Quantiles",ylab="Standardized Residuals",main="Normal Q-Q")
qqline(res,col=2)
s=sqrt(sum(res^2)/(length(res)-l$enp))
stdres=res/(sqrt(1-hat(res))*s)
plot(fit,sqrt(stdres),xlab="Fitted",ylab="Sqrt Standardized Residuals", main="Scale-Location")
return(shapiro.test(res))
}
}
Reg_gam=function(data,name){
par=data[,2]
div=data[,3]
len=length(par)/nsimu
data_par=data.frame(par,div)
g=gam(div~s(par),data=data_par)
plot(par,div,xlab="parameter",ylab="p-distance",main=name)
lines(par[1:len],predict(g)[1:len],col=4,lwd=3)
df=pen.edf(g)
err=sqrt(mean((predict(g)-div)**2))
value=err/(1-df/length(par))^2
return(list(value=value,err=err,df=df))
}
data=data_beta2
par=data[,2]
div=data[,3]
data2=data.frame(par,div)
lt1=loess(div~par,data=data2,model=TRUE)
lt1$terms
lt1$robust
lt1$s
Graph=function(data,name){
par=data[,2]
div=data[,3]
plot(par,div,col="gray49",xlab="parameter",ylab="p-distance",main=name)
}
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/data")
nsimu=5
# t=2
data_beta2=read.table("data_beta_t2.csv",header=TRUE,sep=",")
data_delta2=read.table("data_delta_t2.csv",header=TRUE,sep=",")
data_p2=read.table("data_p_t2.csv",header=TRUE,sep=",")
data_c2=read.table("data_c_t2.csv",header=TRUE,sep=",")
data_mu2=read.table("data_mu_t2.csv",header=TRUE,sep=",")
data_gamma12=read.table("data_gamma1_t2.csv",header=TRUE,sep=",")
data_gamma22=read.table("data_gamma2_t2.csv",header=TRUE,sep=",")
# t=2.5
data_beta25=read.table("data_beta_t25.csv",header=TRUE,sep=",")
data_delta25=read.table("data_delta_t25.csv",header=TRUE,sep=",")
data_p25=read.table("data_p_t25.csv",header=TRUE,sep=",")
data_c25=read.table("data_c_t25.csv",header=TRUE,sep=",")
data_mu25=read.table("data_mu_t25.csv",header=TRUE,sep=",")
data_gamma125=read.table("data_gamma1_t25.csv",header=TRUE,sep=",")
data_gamma225=read.table("data_gamma2_t25.csv",header=TRUE,sep=",")
# t=3
data_beta3=read.table("data_beta_t3.csv",header=TRUE,sep=",")
data_delta3=read.table("data_delta_t3.csv",header=TRUE,sep=",")
data_p3=read.table("data_p_t3.csv",header=TRUE,sep=",")
data_c3=read.table("data_c_t3.csv",header=TRUE,sep=",")
data_mu3=read.table("data_mu_t3.csv",header=TRUE,sep=",")
data_gamma13=read.table("data_gamma1_t3.csv",header=TRUE,sep=",")
data_gamma23=read.table("data_gamma2_t3.csv",header=TRUE,sep=",")
# t=15
data_beta15=read.table("data_beta_t15.csv",header=TRUE,sep=",")
data_delta15=read.table("data_delta_t15.csv",header=TRUE,sep=",")
data_p15=read.table("data_p_t15.csv",header=TRUE,sep=",")
data_c15=read.table("data_c_t15.csv",header=TRUE,sep=",")
data_mu15=read.table("data_mu_t15.csv",header=TRUE,sep=",")
data_gamma115=read.table("data_gamma1_t15.csv",header=TRUE,sep=",")
data_gamma215=read.table("data_gamma2_t15.csv",header=TRUE,sep=",")
par(mfrow=c(2,2))
Graph(data_beta2,"Beta, t=2")
Graph(data_beta25,"Beta, t=2.5")
Graph(data_beta3,"Beta, t=3")
Graph(data_beta15,"Beta, t=15")
# delta
par(mfrow=c(2,2))
Graph(data_delta2,"Delta, t=2")
Graph(data_delta25,"Delta, t=2.5")
Graph(data_delta3,"Delta, t=3")
Graph(data_delta15,"Delta, t=15")
# p
par(mfrow=c(2,2))
Graph(data_p2, "p, t=2")
Graph(data_p25, "p, t=2.5")
Graph(data_p3, "p, t=3")
Graph(data_p15, "p, t=15")
par(mfrow=c(2,2))
Graph(data_c2,"c, t=2")
Graph(data_c25,"c, t=2.5")
Graph(data_c3,"c, t=3")
Graph(data_c15,"c, t=15")
# mu
par(mfrow=c(2,2))
Graph(data_mu2,"Mu, t=2")
Graph(data_mu25,"Mu, t=2.5")
Graph(data_mu3,"Mu, t=3")
Graph(data_mu15,"Mu, t=15")
# gamma1
par(mfrow=c(2,2))
Graph(data_gamma12,"Gamma1, t=2")
Graph(data_gamma125,"Gamma1, t=2.5")
Graph(data_gamma13,"Gamma1, t=3")
Graph(data_gamma115,"Gamma1, t=15")
# gamma2
par(mfrow=c(2,2))
Graph(data_gamma22,"Gamma2, t=2")
Graph(data_gamma225,"Gamma2, t=2.5")
Graph(data_gamma23,"Gamma2, t=3")
Graph(data_gamma215,"Gamma2, t=15")
Graph_loess=function(data,main){
par=data[,2]
div=data[,3]
newdata=data.frame(par,div)
pl=ggplot(data=newdata, aes(x=par,y=div))+geom_point(size=2,colour="gray49",shape=1) + theme_classic()
pl=pl+ stat_smooth(method="loess",colour="chartreuse4",fill="green")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
t1=Graph_loess(data_beta2,"beta, t=2")
t2=Graph_loess(data_delta2,"delta, t=2")
t3=Graph_loess(data_p2,"p, t=2")
t4=Graph_loess(data_c2,"c, t=2")
t5=Graph_loess(data_mu2,"mu, t=2")
t6=Graph_loess(data_gamma12, "gamma1, t=2")
t7=Graph_loess(data_gamma22,"gamma2, t=2")
multiplot(t1,t2,t3,t4,t5,t6,t7,cols=3)
# t=2.5
t8=Graph_loess(data_beta2,"beta, t=2.5")
t9=Graph_loess(data_delta2,"delta, t=2.5")
t10=Graph_loess(data_p2,"p, t=2.5")
t11=Graph_loess(data_c2,"c, t=2.5")
t12=Graph_loess(data_mu2,"mu, t=2.5")
t13=Graph_loess(data_gamma12, "gamma1, t=2.5")
t14=Graph_loess(data_gamma22,"gamma2, t=2.5")
multiplot(t8,t9,t10,t11,t12,t13,t14,cols=3)
# t=3
t15=Graph_loess(data_beta2,"beta, t=3")
t16=Graph_loess(data_delta2,"delta, t=3")
t17=Graph_loess(data_p2,"p, t=3")
t18=Graph_loess(data_c2,"c, t=3")
t19=Graph_loess(data_mu2,"mu, t=3")
t20=Graph_loess(data_gamma12, "gamma1, t=3")
t21=Graph_loess(data_gamma22,"gamma2, t=3")
multiplot(t15,t16,t17,t18,t19,t20,t21,cols=3)
# t=15
t22=Graph_loess(data_beta2,"beta, t=15")
t23=Graph_loess(data_delta2,"delta, t=15")
t24=Graph_loess(data_p2,"p, t=15")
t25=Graph_loess(data_c2,"c, t=15")
t26=Graph_loess(data_mu2,"mu, t=15")
t27=Graph_loess(data_gamma12, "gamma1, t=15")
t28=Graph_loess(data_gamma22,"gamma2, t=15")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
library(ggplot2)
multiplot(t1,t2,t3,t4,t5,t6,t7,cols=3)
Graph_loess=function(data,main){
par=data[,2]
div=data[,3]
newdata=data.frame(par,div)
pl=ggplot(data=newdata, aes(x=par,y=div))+geom_point(size=2,colour="gray49",shape=1) + theme_classic()
pl=pl+ stat_smooth(method="loess",colour="chartreuse3",fill="green")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
# t=2
t1=Graph_loess(data_beta2,"beta, t=2")
t2=Graph_loess(data_delta2,"delta, t=2")
t3=Graph_loess(data_p2,"p, t=2")
t4=Graph_loess(data_c2,"c, t=2")
t5=Graph_loess(data_mu2,"mu, t=2")
t6=Graph_loess(data_gamma12, "gamma1, t=2")
t7=Graph_loess(data_gamma22,"gamma2, t=2")
multiplot(t1,t2,t3,t4,t5,t6,t7,cols=3)
Graph_loess=function(data,main){
par=data[,2]
div=data[,3]
newdata=data.frame(par,div)
pl=ggplot(data=newdata, aes(x=par,y=div))+geom_point(size=2,colour="gray49",shape=1) + theme_classic()
pl=pl+ stat_smooth(method="loess",colour="firebrick3",fill="red")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
# t=2
t1=Graph_loess(data_beta2,"beta, t=2")
t2=Graph_loess(data_delta2,"delta, t=2")
t3=Graph_loess(data_p2,"p, t=2")
t4=Graph_loess(data_c2,"c, t=2")
t5=Graph_loess(data_mu2,"mu, t=2")
t6=Graph_loess(data_gamma12, "gamma1, t=2")
t7=Graph_loess(data_gamma22,"gamma2, t=2")
multiplot(t1,t2,t3,t4,t5,t6,t7,cols=3)
Graph_loess=function(data,main){
par=data[,2]
div=data[,3]
newdata=data.frame(par,div)
pl=ggplot(data=newdata, aes(x=par,y=div))+geom_point(size=2,shape=1) + theme_classic()
pl=pl+ stat_smooth(method="loess",colour="firebrick3",fill="red")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
# t=2
t1=Graph_loess(data_beta2,"beta, t=2")
t2=Graph_loess(data_delta2,"delta, t=2")
t3=Graph_loess(data_p2,"p, t=2")
t4=Graph_loess(data_c2,"c, t=2")
t5=Graph_loess(data_mu2,"mu, t=2")
t6=Graph_loess(data_gamma12, "gamma1, t=2")
t7=Graph_loess(data_gamma22,"gamma2, t=2")
multiplot(t1,t2,t3,t4,t5,t6,t7,cols=3)
Graph_loess=function(data,main){
par=data[,2]
div=data[,3]
newdata=data.frame(par,div)
pl=ggplot(data=newdata, aes(x=par,y=div))+geom_point(size=2,shape=1) + theme_classic()
pl=pl+ stat_smooth(method="loess",colour="chartreuse3",fill="green")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
# t=2
t1=Graph_loess(data_beta2,"beta, t=2")
t2=Graph_loess(data_delta2,"delta, t=2")
t3=Graph_loess(data_p2,"p, t=2")
t4=Graph_loess(data_c2,"c, t=2")
t5=Graph_loess(data_mu2,"mu, t=2")
t6=Graph_loess(data_gamma12, "gamma1, t=2")
t7=Graph_loess(data_gamma22,"gamma2, t=2")
multiplot(t1,t2,t3,t4,t5,t6,t7,cols=3)
Graph_loess=function(data,main){
par=data[,2]
div=data[,3]
newdata=data.frame(par,div)
pl=ggplot(data=newdata, aes(x=par,y=div))+geom_point(size=2,shape=1) + theme_classic()
pl=pl+ stat_smooth(method="loess",colour="chartreuse4",fill="green")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
# t=2
t1=Graph_loess(data_beta2,"beta, t=2")
t2=Graph_loess(data_delta2,"delta, t=2")
t3=Graph_loess(data_p2,"p, t=2")
t4=Graph_loess(data_c2,"c, t=2")
t5=Graph_loess(data_mu2,"mu, t=2")
t6=Graph_loess(data_gamma12, "gamma1, t=2")
t7=Graph_loess(data_gamma22,"gamma2, t=2")
multiplot(t1,t2,t3,t4,t5,t6,t7,cols=3)
Graph_loess=function(data,main){
par=data[,2]
div=data[,3]
newdata=data.frame(par,div)
pl=ggplot(data=newdata, aes(x=par,y=div))+geom_point(size=2,shape=1) + theme_classic()
pl=pl+ stat_smooth(method="loess",colour="green3",fill="green")
pl=pl+ggtitle(main)+xlab("Parameter")+ylab("p-distance")
return(pl)
}
# t=2
t1=Graph_loess(data_beta2,"beta, t=2")
t2=Graph_loess(data_delta2,"delta, t=2")
t3=Graph_loess(data_p2,"p, t=2")
t4=Graph_loess(data_c2,"c, t=2")
t5=Graph_loess(data_mu2,"mu, t=2")
t6=Graph_loess(data_gamma12, "gamma1, t=2")
t7=Graph_loess(data_gamma22,"gamma2, t=2")
multiplot(t1,t2,t3,t4,t5,t6,t7,cols=3)
par(mfrow=c(1,4))
Graph(data_beta2,"Beta, t=2")
Graph(data_beta25,"Beta, t=2.5")
Graph(data_beta3,"Beta, t=3")
Graph(data_beta15,"Beta, t=15")
Graph=function(data,name){
par=data[,2]
div=data[,3]
plot(par,div,xlab="parameter",ylab="p-distance",main=name)
}
par(mfrow=c(1,4))
Graph(data_beta2,"Beta, t=2")
Graph(data_beta25,"Beta, t=2.5")
Graph(data_beta3,"Beta, t=3")
Graph(data_beta15,"Beta, t=15")
par(mfrow=c(1,4))
Graph(data_c2,"c, t=2")
Graph(data_c25,"c, t=2.5")
Graph(data_c3,"c, t=3")
Graph(data_c15,"c, t=15")
setwd("~/Documents/Stage/Code/Diversité_intra/analyse_sensibilité")
setwd("~/Documents/Stage/Code/Diversité_intra(1)/analyse_sensibilité/Repr_params")
